#!/usr/bin/env ruby
data = File.read('FACE.PAL').force_encoding("ASCII-8BIT")

# Via xkeeper, extract the specific range of bits
def get_val(byte, start, mask)
  (byte >> start) & ((2 ** mask) - 1)
end

values = data.bytes.each_slice(2).map do |bytes|
  # Interpret bytes as a 16-bit big-endian unsigned integer
  byte  = bytes.map(&:chr).join.unpack("S>")[0]
  red   = (get_val(byte, 0, 5) * 8.2).ceil
  green = (get_val(byte, 5, 5) * 8.2).ceil
  blue  = (get_val(byte, 10, 5) * 8.2).ceil

  {
    red: red, green: green, blue: blue
  }
end

colour_count = values.length
data_length = 4 + 4 + 2 + 4 + 2 + (4 * colour_count)

File.open("FACE.RIFF.PAL", "w") do |f|
  f.write "RIFF"
  f.write [data_length].pack("L<")
  f.write "PAL "

  f.write "data"
  f.write [data_length].pack("L<")
  f.write "\x00\x03"
  f.write [colour_count].pack("S<")

  values.each do |colour|
    f.write colour[:red].chr
    f.write colour[:green].chr
    f.write colour[:blue].chr
    f.write 0x00.chr
  end
end
